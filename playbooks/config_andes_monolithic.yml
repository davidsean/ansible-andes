# This playbook will create a singel lxc container to host a monolthic Andes stack
# The container is meant ot be used as a post-prod instaces for post-prod validation
# andes-web
# andes-db
# nginx-proxy
---

# Specify the target host using:
#  ansible-playbook playbooks/config_andes_monolithic.yml -e 'host=biodiversity'
- hosts: '{{ host }}'
  connection: local
  tasks:

#### DATABASE



    - name: Print var
      ansible.builtin.debug:
        msg: "host: {{ host }}"
    - name: Print var
      ansible.builtin.debug:
        msg: "web_port: {{ hostvars[host]['web_port'] }}"
    - name: Print var
      ansible.builtin.debug:
        msg: "db_port: {{ hostvars[host]['db_port'] }}"

    - name: Install MySQL
      apt:
        update_cache: yes
        pkg: 
          - mysql-server
          - python3-mysqldb #needed to interact with the db
        state: present

    - name: ensure mysql is configured to bind to the specified address and port
      ini_file:
        dest: /etc/mysql/my.cnf
        section: mysqld
        option: "{{ item.option }}"
        value: "{{ item.value }}"
      # register: my_cnf
      with_items:
        # - { option: bind-address, value: localhost }
        # consider allowing external connections 
        - { option: bind-address, value: 0.0.0.0 } 

    - name: update mysql root password for local root account
      mysql_user: 
        name: root 
        host: localhost 
        priv: "*.*:ALL,GRANT"
        state: present

    - name: write mysqlconf from jinja2 template
      ansible.builtin.template:
        src: ../templates/mysql_conf.j2
        dest: /root/.my.cnf
        owner: root
        group: root
        mode: 0644

    - name: restart the mysql service 
      shell: "service mysql restart"

    - name: ensure mysql is enabled to run on startup 
      service: 
        name: mysql
        state: started
        enabled: true

    - name: create the database
      mysql_db: 
        login_user: root
        login_password: "{{ db_root_password }}"
        name: "{{ db_name }}"
        collation: utf8mb4_0900_ai_ci
        encoding: utf8mb4
        state: present

    - name: create the andes root user
      mysql_user: 
        login_user: root
        login_password: "{{ db_root_password }}"
        name: "{{ db_user_name }}"
        password: "{{ db_user_password }}"
        # restrict this user to localhost 
        host: "localhost"
        priv: "{{ db_name }}.*:ALL,GRANT"
        state: present

    - name: create the a read-only user
      mysql_user: 
        login_user: root
        login_password: "{{ db_root_password }}"
        name: "{{ db_ro_user_name }}"
        password: "{{ db_ro_password }}"
        host: "%"
        priv: "{{ db_name }}.*:SELECT, SHOW VIEW"
        state: present

    - name: create the a read-write user
      mysql_user: 
        login_user: root
        login_password: "{{ db_root_password }}"
        name: "{{ db_rw_user_name }}"
        password: "{{ db_rw_password }}"
        host: "%"
        priv: "{{ db_name }}.*:DELETE, INSERT, UPDATE, SELECT, SHOW VIEW"
        state: present

#### FIXTURES

    - name: Copy fixtures 
      copy:
        src: "../fixtures/{{ fixture_filename }}"
        owner: root
        group: root
        dest: "/root/{{ fixture_filename }}"

    - name: Import DB 
      shell: "mysql {{ db_name }} < /root/{{ fixture_filename }}"


#### WEB

    - name: Install apt requirements
      apt:
        update_cache: yes
        pkg: 
          - git
          - apache2
          - libapache2-mod-wsgi-py3
          - python3
          - python3-pip
          - gettext 
          - libapache2-mod-wsgi-py3
          - redis
          - default-libmysqlclient-dev
          # these are needed for printer
          - cups
          - libcups2-dev 
          # these are required for building Pillow
          - python3-dev
          - python3-setuptools
          - libjpeg8-dev 
        state: present

    - name: Git init, make ssh dir
      file:
        path: /root/.ssh/
        state: directory

    - name: Git init, Copy private key
      copy:
        src: ../files/id_rsa_andes
        dest: /root/.ssh/id_rsa_andes
        owner: root
        group: root
        mode: 0600

    - name: Git init, Copy config file
      copy: 
        src: ../files/ssh_config
        dest: /root/.ssh/config
        owner: root
        group: root
        mode: 0644

    - name: Git init, clone the repo
      git:
        repo: git@github.com:dfo-gulf-science/andes.git
        force: true
        accept_hostkey: true
        key_file: /root/.ssh/id_rsa_andes
        version: "{{ git_sha }}"
        dest: "{{ andes_dir }}/"


    - name: Add as system-wide safe directory
      community.general.git_config:
        name: safe.directory
        scope: system
        value: "{{ andes_dir }}"
          
    - name: pip install requirements
      ansible.builtin.pip:
        requirements: "{{ andes_dir }}/requirements.txt"

    - name: pip install special requirements
      ansible.builtin.pip:
        requirements: "{{ andes_dir }}/special_requirements.txt"

    # # mysql2sqlite to allow servers on mysqlbackend to provide a sqlite3 backup option
    # - name: pip install mysql2sqlite
    #   ansible.builtin.pip:
    #     name: mysql-to-sqlite3

    # # sqlite3 to allow servers on mysqlbackend to provide a sqlite3 backup option
    # - name: pip install mysql2sqlite
    #   apt:
    #     update_cache: no
    #     pkg: 
    #       - sqlite3

    - name: write .env from jinja2 template
      ansible.builtin.template:
        src: ../templates/andes_env.j2
        dest: "/{{ andes_dir }}/.env"
        owner: root
        group: root

    - name: Create the media directory 
      ansible.builtin.file:
        path: /{{ andes_dir }}/media
        state: directory
        mode: '0755'
        owner: www-data
        group: www-data

    - name: Create the images directory 
      ansible.builtin.file:
        path: /{{ andes_dir }}/media/images
        state: directory
        mode: '0755'
        owner: www-data
        group: www-data

    - name: Create the django log directory
      ansible.builtin.file:
          path: /var/log/django
          state: directory
          mode: 0771 # go rwx
          group: www-data


    - name: Create the django log file
      ansible.builtin.file:
        path: /var/log/django/django.log
        state: touch
        mode: u=rw,g=r,o=rw
        owner: www-data
        group: www-data

        
    - name: add tweak in settings.py
      ansible.builtin.lineinfile:
        path: "{{ andes_dir}}/andes/settings.py"
        line: SECURE_CROSS_ORIGIN_OPENER_POLICY = None
    
    - name: add another tweak in settings.py
      ansible.builtin.lineinfile:
        path: "{{ andes_dir}}/andes/settings.py"
        line: CSRF_TRUSTED_ORIGINS = ['http://iml-science-1.ent.dfo-mpo.ca']

  ### START setup CELERY
    - name: Ensure celery group exists
      ansible.builtin.group:
        name: celery
        state: present

    - name: Add the celery user
      ansible.builtin.user:
        name: celery
        comment: user for managing celery daemon
        create_home: false
        password: '!' # disabled password
        groups: celery, www-data

    - name: Create the celery conf
      ansible.builtin.template:
        src: ../templates/celeryd_conf.j2
        dest: /etc/default/celeryd
        owner: root
        group: root

    - name: Create the run directory
      ansible.builtin.file:
          path: /var/run/celery
          state: directory
          mode: 0771 # go rwx
          group: www-data

    - name: Create the celery log directory
      ansible.builtin.file:
          path: /var/log/celery
          state: directory
          mode: 0771 # go rwx
          group: www-data

    - name: Enable and start red-s-server
      ansible.builtin.systemd:
        name:  redis-server.service
        state: started
        enabled: true

    - name: write celery systemd service from jinja2 template
      ansible.builtin.template:
        src: ../templates/celeryd_service.j2
        dest: /etc/systemd/system/celeryd.service
        owner: root
        group: root

    - name: write celery beat systemd service from jinja2 template
      ansible.builtin.template:
        src: ../templates/celerybeat_service.j2
        dest: /etc/systemd/system/celerybeat.service
        owner: root
        group: root

    - name: Enable and start celeryd.service
      ansible.builtin.systemd:
        name:  celeryd.service
        state: started
        enabled: true

    - name: Enable and start celerybeat.service
      ansible.builtin.systemd:
        name:  celerybeat.service
        state: started
        enabled: true
    ### END setup CELERY

    ### start the nmea listener services
    - name: nav depth listener systemd service from jinja2 template
      ansible.builtin.template:
        src: ../templates/nav_depth_listener.j2
        dest: /etc/systemd/system/nav_depth.service
        owner: root
        group: root

    - name: Enable and start nav_depth.service
      ansible.builtin.systemd:
        name:  nav_depth.service
        state: started
        enabled: true


    - name: Django Check
      command: /usr/bin/python3 {{ andes_dir }}/manage.py check

    # migrate and loaddata are now longer needed if the sql file is loaded
    # - name: Django Migrate
    #   command: /usr/bin/python3 {{ andes_dir }}/manage.py migrate

    # - name: Django loaddata    
    #   command: "/usr/bin/python3 {{ andes_dir }}/manage.py loaddata {{ andes_dir }}/{{ fixture_filename }}"

    - name: Django compilemessages
      command: /usr/bin/python3 {{ andes_dir }}/manage.py compilemessages

    - name: Django collectstatic
      command: /usr/bin/python3 {{ andes_dir }}/manage.py collectstatic --no-input
      # notify: Reload Apache

    - name: Set up Apache 
      ansible.builtin.template:
        src: ../templates/apache_conf.j2
        dest: /etc/apache2/sites-available/000-default.conf
        owner: root
        group: root

    - name: Reload Apache 
      service:
        name: apache2
        state: reloaded

